import { CanvasRenderingTarget2D, Size } from "fancy-canvas";
import { IDestroyable } from "../helpers/idestroyable";
import { ISubscription } from "../helpers/isubscription";
import { Coordinate } from "../model/coordinate";
import { InvalidationLevel } from "../model/invalidate-mask";
import { Pane } from "../model/pane";
import { Point } from "../model/point";
import { TimePointIndex } from "../model/time-data";
import { TouchMouseEventData } from "../model/touch-mouse-event-data";
import { IChartWidgetBase } from "./chart-widget";
import { IPaneViewsGetter } from "./ipane-view-getter";
import { MouseEventHandlerMouseEvent, MouseEventHandlers, MouseEventHandlerTouchEvent, Position } from "./mouse-event-handler";
import { HitTestResult } from "./pane-hit-test";
import { PriceAxisWidget, PriceAxisWidgetSide } from "./price-axis-widget";
export declare class PaneWidget implements IDestroyable, MouseEventHandlers {
    private readonly _chart;
    private _state;
    private _size;
    private _leftPriceAxisWidget;
    private _rightPriceAxisWidget;
    private readonly _paneCell;
    private readonly _leftAxisCell;
    private readonly _rightAxisCell;
    private readonly _canvasBinding;
    private readonly _topCanvasBinding;
    private readonly _rowElement;
    private readonly _mouseEventHandler;
    private _startScrollingPos;
    private _isScrolling;
    private _clicked;
    private _dblClicked;
    private _prevPinchScale;
    private _longTap;
    private _startTrackPoint;
    private _exitTrackingModeOnNextTry;
    private _initCrosshairPosition;
    private _scrollXAnimation;
    private _isSettingSize;
    constructor(chart: IChartWidgetBase, state: Pane);
    destroy(): void;
    state(): Pane;
    setState(pane: Pane | null): void;
    chart(): IChartWidgetBase;
    getElement(): HTMLElement;
    updatePriceAxisWidgetsStates(): void;
    updatePriceAxisWidgets(): void;
    stretchFactor(): number;
    setStretchFactor(stretchFactor: number): void;
    mouseEnterEvent(event: MouseEventHandlerMouseEvent): void;
    mouseDownEvent(event: MouseEventHandlerMouseEvent): void;
    mouseMoveEvent(event: MouseEventHandlerMouseEvent): void;
    mouseClickEvent(event: MouseEventHandlerMouseEvent): void;
    mouseDoubleClickEvent(event: MouseEventHandlerMouseEvent | MouseEventHandlerTouchEvent): void;
    doubleTapEvent(event: MouseEventHandlerTouchEvent): void;
    pressedMouseMoveEvent(event: MouseEventHandlerMouseEvent): void;
    mouseUpEvent(event: MouseEventHandlerMouseEvent): void;
    tapEvent(event: MouseEventHandlerTouchEvent): void;
    longTapEvent(event: MouseEventHandlerTouchEvent): void;
    mouseLeaveEvent(event: MouseEventHandlerMouseEvent): void;
    clicked(): ISubscription<TimePointIndex | null, Point, TouchMouseEventData>;
    dblClicked(): ISubscription<TimePointIndex | null, Point, TouchMouseEventData>;
    pinchStartEvent(): void;
    pinchEvent(middlePoint: Position, scale: number): void;
    touchStartEvent(event: MouseEventHandlerTouchEvent): void;
    touchMoveEvent(event: MouseEventHandlerTouchEvent): void;
    touchEndEvent(event: MouseEventHandlerTouchEvent): void;
    hitTest(x: Coordinate, y: Coordinate): HitTestResult | null;
    setPriceAxisSize(width: number, position: PriceAxisWidgetSide): void;
    getSize(): Size;
    setSize(newSize: Size): void;
    recalculatePriceScales(): void;
    getBitmapSize(): Size;
    drawBitmap(ctx: CanvasRenderingContext2D, x: number, y: number): void;
    paint(type: InvalidationLevel): void;
    leftPriceAxisWidget(): PriceAxisWidget | null;
    rightPriceAxisWidget(): PriceAxisWidget | null;
    drawAdditionalSources(target: CanvasRenderingTarget2D, paneViewsGetter: IPaneViewsGetter): void;
    private _onStateDestroyed;
    private _fireClickedDelegate;
    private _fireMouseClickDelegate;
    private _drawBackground;
    private _drawGrid;
    private _drawWatermark;
    private _drawCrosshair;
    private _drawSources;
    private _drawSourceImpl;
    private _recreatePriceAxisWidgets;
    private _preventScroll;
    private _correctXCoord;
    private _correctYCoord;
    private _setCrosshairPosition;
    private _clearCrosshairPosition;
    private _tryExitTrackingMode;
    private _startTrackingMode;
    private _model;
    private _endScroll;
    private _onMouseEvent;
    private _mouseTouchDownEvent;
    private _pressedMouseTouchMoveEvent;
    private readonly _canvasSuggestedBitmapSizeChangedHandler;
    private readonly _topCanvasSuggestedBitmapSizeChangedHandler;
}
